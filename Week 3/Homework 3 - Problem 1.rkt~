;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname |Homework 3 - Problem 1|) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
; == Homework 3, Problem 1 ==

; Consider the following structure and data definition:

(define-struct element [name symbol num weight])

; An Element is a (make-element String String PosInteger PosReal)
; Interpretation: an element on the periodic table
; - name is the name of the element
; - symbol is the element's symbol
; - num is the atomic number
; - weight is the standard atomic weight

; TODO #1: List all signatures of all functions that are defined by
; this structure and data definition. Your signatures should
; be as precise as possible.

; A name is one of:
; - "Magnesium"
; - "Titanium"
; - "Copper"
; Interpretation: represents the name of an element

; A symbol is one of:
; - "Ar"
; - "C"
; - "Pb"
; Interpretation: represents the symbol of an element

; A num is one of:
; - 13
; - 52
; - 114
; Interpretation: represents the atomic number of an element

; A weight is one of:
; - 32.06
; - 183.84
; - 87.62
; Interpretation: represents the atomic weight of an element


; TODO #2: Define at least three examples of Element
; (feel free to reference relevant sources, such as ...
; https://en.wikipedia.org/wiki/Periodic_table)


(define Hellium (make-element "Hellium" "He" 2 4.003))
(define Hydrogen (make-element "Hydrogen" "H" 1 1.008))
(define Lithium (make-element "Lithium" "Li" 3 6.941))


; TODO #3: Design the template for functions that consume an Element

(define (element-temp e)
  (... (element-name e)
       (element-symbol e)
       (element-num e)
       (element-weight e) ...))
