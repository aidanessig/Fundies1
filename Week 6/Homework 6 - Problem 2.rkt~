;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-reader.ss" "lang")((modname |Homework 6 - Problem 2|) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
; == Homework 6, Problem 2 ==

; TODO #1: Design the function list-superlative that accepts a
; non-empty list and a value-function (which produces a number
; for each element of the list) and returns the first element
; that results in the maximal valuation. This is essentially an
; argmax and so you aren't allowed to use this function; you
; must produce a template-based, recursive solution for credit.
;
; As guiding examples...
; - given a list of the first three positive integers (1, 2, 3)
;   and the value-function identity (which just returns whatever
;   it is supplied), the function would return 3; however, if
;   the function were - (which negates the values), the function
;   would return 1.
; - given a list of (x, y) positions and posn-y as the
;   value-function, the function should return the position with
;   the largest y-coordinate
; - given a list of strings and string-length as the value-function,
;   the function should return the longest string

; list-superlative : [ListOfItems] value-function -> ?
; Interpretation: returns the element that results in
; maximal valuation from value-function
(define (list-superlative LoI vf)
  (apply max (function-list LoI vf)))

(define (function-list LoI vf)
  (cond
    [(empty? LoI) '()]
    [(cons? LoI) (cons (vf (first LoI)) (function-list (rest LoI) vf))]))

(check-expect (list-superlative (list 1 2 3) test-function-1) 4)

(define (test-function-1 i)
  (add1 i))